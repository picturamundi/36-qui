/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {

        behaviors {

        phr: positional_hold_right {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <10>, <11>, <12>, <13>, <14>;    // <---[[the W key]]
        };

        phl: positional_hold_left {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <15>, <16>, <17>, <18>, <19>;    // <---[[the W key]]
        };
    };

        keymap {
                compatible = "zmk,keymap";
                default_layer {

// 0-----------------------------------------------------------------------------------------
// |  '  |  ,  |  .  |  p  |  y   |          |  f  |  g   |  c  |  r  |  l  |
// |  a  |  o  |  e  |  u  |  i   |          |  d  |  h   |  t  |  n  |  s  |
// |  ;  |  q  |  j  |  k  |  x   |          |  b  |  m   |  w  |  v  |  z  |
//             | GUI | NAV | SHFT |          | SPC | SYM  | ALT |

                        bindings = <
   &kp SQT      &kp COMMA       &kp DOT         &kp P      &kp Y        &kp F   &kp G       &kp C           &kp R           &kp L
   &kp  A       &kp O           &kp E           &kp U      &kp I        &kp D   &phr RGUI H     &phr RALT T     &phr RCTRL N    &phr RSHFT S
   &kp SEMI     &kp Q           &kp J           &kp K      &kp X        &kp B   &kp M       &kp W           &kp V           &kp Z
   &bt BT_CLR   &kp BSPC        &sk LSHFT                                                   &kp SPACE       &kp TAB         &kp RGUI
                        >;
                };

                nav_layer {
// 1-----------------------------------------------------------------------------------------
// |BTCLR|     | ESC |  ~   |     |          | TAB | HOME |  UP  | END | DEL  |
// | BT1 | GUI | ALT | CTRL | NUM |          |  /  | LEFT | DOWN | RGT | BKSP |
// | BT2 |     |     |      |     |          |  \  | ENT  |      |     |      |
//             |     |      |     |          |     |      |      |
                        bindings = <
   &trans   &kp RA(LEFT)        &kp UP          &kp RA(RIGHT)   &trans        &kp LS(LC(LA(LG(Y))))   &kp LS(LC(LA(LG(U))))        &kp  LS(LC(LA(LG(I))))       &kp LS(LC(LA(LG(O))))   &kp LS(LC(LA(LG(SEMI))))
   &trans   &kp LEFT            &kp DOWN        &kp RIGHT       &trans        &kp LS(LC(LA(LG(H))))   &kp LS(LC(LA(LG(J))))        &kp LS(LC(LA(LG(C))))        &kp LS(LC(LA(LG(L))))   &kp RET
   &trans   &trans              &trans          &trans          &trans        &kp LS(LC(LA(LG(N))))   &kp LS(LC(LA(LG(M))))        &kp  LC(LA(LG(COMMA)))       &kp LC(LA(LG(DOT)))     &trans
                                &trans          &trans          &trans        &trans                    &trans                     &trans
                        >;
                };

                sym_layer {
// 2-----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |          |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |          |  -  |  =  |  {  |  }  | "|" |
// |     |     |     |     |     |          |  _  |  +  |  [  |  ]  |  \  |
//             | GUI |     | SPC |          | ENT |     | ALT |
                        bindings = <
   &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR
   &trans    &trans    &trans    &trans    &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp PIPE
   &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans          &trans   &kp BSLH
                       &kp LGUI  &trans    &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

// This layer is unreachable until "tri layer state" is sorted out.
// Leaving it here for completeness.
                num_layer {
// 3-----------------------------------------------------------------------------------------
// |     |     |     |     |     |          |  A  |  7  |  8  |  9  |  D  |
// |     |     |     |     |     |          |  B  |  4  |  5  |  6  |  E  |
// |     |     |     |     |     |          |  C  |  1  |  2  |  3  |  F  |
//             |     |     |     |          |  0  |  .  |     |
                        bindings = <
   &trans &trans &trans &trans &trans    &kp A  &kp N7  &kp N8 &kp N9 &kp D
   &trans &trans &trans &trans &trans    &kp B  &kp N4  &kp N5 &kp N6 &kp E
   &trans &trans &trans &trans &trans    &kp C  &kp N1  &kp N2 &kp N3 &kp F
                 &trans &trans &trans    &kp N0 &kp DOT &trans
                        >;
                };
        };
};
